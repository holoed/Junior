;; var {foldLeft, fmap} = require('./Base.js'); var {mkTuple2, fst, snd, empty, containsKey, findValue, error} = require('./Externals.js'); var {mkTyCon, mkTyVar, mkTyLam, isTyVar, TyVar, TyLam, isInt, isFloat, isString, isChar} = require('./TypesExternals.js'); var bind = function (m) {  return function (f) {  return function (r) {  return function (s) { var p = ((m (r)) (s)); var s2 = (fst (p)); var x = (snd (p)); return (((f (x)) (r)) (s2)) } } } }; var unit = function (x) {  return function (r) {  return function (s) {  return ((mkTuple2 (s)) (x)) } } }; var ask = function (r) {  return function (s) {  return ((mkTuple2 (s)) (r)) } }; var local = function (f) {  return function (m) {  return function (r) {  return function (s) {  return ((m ((f (r)))) (s)) } } } }; var put = function (s2) {  return function (r) {  return function (s) {  return ((mkTuple2 (s2)) ("()")) } } }; var get = function (r) {  return function (s) {  return ((mkTuple2 (s)) (s)) } }; var runReaderState = function (m) {  return function (r) {  return function (s) {  return ((m (r)) (s)) } } }; var freshName = ((bind (get)) (function (x) {  return ((bind ((put ((x + (1)))))) (function (i2) {  return (unit (("T" + (x)))) })) })); var prettyType = function (t) {  return function() { if ((isTyCon (t))) { var p = (extractTyCon (t)); return (((fst (p)) + (" ")) + ((((foldLeft (function (acc) {  return function (x) {  return (acc + ((prettyType (x)))) } })) ("")) ((snd (p)))))) } else { return function() { if ((isTyVar (t))) { return (extractTyVar (t)) } else { return function() { if ((isTyLam (t))) { var p = (extractTyLam (t)); return (((("(" + ((prettyType ((fst (p)))))) + (" -> ")) + ((prettyType ((snd (p)))))) + (")")) } else { return (error ("This should not happen")) } }() } }() } }() }; var integerCon = ((mkTyCon ("Int")) (empty)); var floatCon = ((mkTyCon ("Float")) (empty)); var charCon = ((mkTyCon ("Char")) (empty)); var stringCon = ((mkTyCon ("String")) (empty)); var literalToType = function (lit) {  return function() { if ((isInt (lit))) { return integerCon } else { return function() { if ((isFloat (lit))) { return floatCon } else { return function() { if ((isChar (lit))) { return charCon } else { return function() { if ((isString (lit))) { return stringCon } else { return (error ("This should not happen")) } }() } }() } }() } }() }; var lookup = function (k) {  return function (dict) {  return function() { if (((containsKey (k)) (dict))) { return ((findValue (k)) (dict)) } else { return (mkTyVar (k)) } }() } }; var equalType = function (t1) {  return function (t2) {  return (((isTyVar (t1)) && ((isTyVar (t2)))) && (((extractTyVar (t1)) == ((extractTyVar (t2)))))) } }; var subs = function (t) {  return function (s) {  return function() { if ((isTyVar (t))) { var n = (extractTyVar (t)); var t2 = ((lookup (n)) (s)); return function() { if (((equalType (t)) (t2))) { return t2 } else { return ((subs (t2)) (s)) } }() } else { return function() { if ((isTyLam (t))) { var p = (extractTyLam (t)); return ((mkTyLam (((subs ((fst (p)))) (s)))) (((subs ((snd (p)))) (s)))) } else { return function() { if ((isTyCon (t))) { var p = (extractTyCon (t)); return ((mkTyCon ((fst (p)))) (((fmap (function (x) {  return ((subs (x)) (s)) })) ((snd (p)))))) } else { return (error ("This should not happen")) } }() } }() } }() } }; var mgu = function (a) {  return function (b) {  return function (s) { var p = ((mkTuple2 (((subs (a)) (s)))) (((subs (b)) (s)))); return function() { if ((((isTyVar ((fst (p)))) && ((isTyVar ((snd (p)))))) && (((extractTyVar ((fst (p)))) == ((extractTyVar ((snd (p))))))))) { return s } else { return (error ("This should not happen")) } }() } } }; exports.bind = bind; exports.unit = unit; exports.ask = ask; exports.local = local; exports.put = put; exports.get = get; exports.runReaderState = runReaderState; exports.freshName = freshName; exports.prettyType = prettyType; exports.integerCon = integerCon; exports.floatCon = floatCon; exports.charCon = charCon; exports.stringCon = stringCon; exports.literalToType = literalToType; exports.lookup = lookup; exports.equalType = equalType; exports.subs = subs; exports.mgu = mgu; 