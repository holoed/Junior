;; var {cons, isEmpty, head, tail, isSpace, isLower, isUpper, empty, mkTuple2, fst, snd, stringToCharList, charListToString, stringToInt, size, notElem, evar, elitS, elit, elitVoid, eimport, eprog, eapp, elet, eIfThenElse, elam, isLit, isVar, isLam, isApp, isLet, isIfThenElse, error, extractLet, extractLam, extractIfThenElse, extractApp, extractVar, extractLit, extractProg, extractImport, show, startsWith, readFile, writeFile, replaceExtensionToJs} = require('./Externals.js'); var {compose, foldLeft, id, foldRight, append, concat, range, fmap, flatMap} = require('./Base.js'); var cataExp = function (e) {  return function (litF) {  return function (varF) {  return function (lamF) {  return function (appF) {  return function (letF) {  return function (ifThenElseF) { var cata = function (e) {  return function() { if ((isLit (e))) { return (litF ((extractLit (e)))) } else { return function() { if ((isVar (e))) { return (varF ((extractVar (e)))) } else { return function() { if ((isLam (e))) { var pair = (extractLam (e)); var n = (fst (pair)); var b = (snd (pair)); return ((lamF (n)) ((cata (b)))) } else { return function() { if ((isApp (e))) { var pair = (extractApp (e)); var e1 = (fst (pair)); var e2 = (snd (pair)); return ((appF ((cata (e1)))) ((cata (e2)))) } else { return function() { if ((isLet (e))) { var args = (extractLet (e)); var n = (fst ((fst (args)))); var v = (snd ((fst (args)))); var b = (snd (args)); return (((letF (n)) ((cata (v)))) ((cata (b)))) } else { return function() { if ((isIfThenElse (e))) { var args = (extractIfThenElse (e)); var p = (fst (args)); var t = (fst ((snd (args)))); var h = (snd ((snd (args)))); return (((ifThenElseF ((cata (p)))) ((cata (t)))) ((cata (h)))) } else { return (error ("This should not happen")) } }() } }() } }() } }() } }() } }() }; return (cata (e)) } } } } } } }; var pretty = function (e) { var isOp = function (c) {  return (((c == ("-")) || ((c == ("==")))) || ((c == ("*")))) }; return (((((((cataExp (e)) (function (x) {  return (show (x)) })) (function (s) {  return s })) (function (s) {  return function (e) {  return ((("\\" + (s)) + (" -> ")) + (e)) } })) (function (e1) {  return function (e2) {  return function() { if ((isOp (e1))) { return ((e2 + (" ")) + (e1)) } else { return (((("(" + (e1)) + (" ")) + (e2)) + (")")) } }() } })) (function (s) {  return function (e1) {  return function (e2) {  return ((((("let " + (s)) + (" = ")) + (e1)) + (" in ")) + (e2)) } } })) (function (p) {  return function (e1) {  return function (e2) {  return ((((("if " + (p)) + (" then ")) + (e1)) + (" else ")) + (e2)) } } })) }; var emitExports = function (e) {  return (((((((cataExp (e)) (function (x) {  return "" })) (function (s) {  return "" })) (function (s) {  return function (e) {  return "" } })) (function (e1) {  return function (e2) {  return "" } })) (function (s) {  return function (e1) {  return function (e2) {  return ((((("exports." + (s)) + (" = ")) + (s)) + ("; ")) + (e2)) } } })) (function (p) {  return function (e1) {  return function (e2) {  return "" } } })) }; var emitFuncImport = function (xs) {  return (((foldLeft (function (x) {  return function (y) {  return ((x + (", ")) + (y)) } })) ((head (xs)))) ((tail (xs)))) }; var emitImport = function (i) {  return (((("var {" + ((emitFuncImport ((snd ((extractImport (i)))))))) + ("} = require(\'./")) + ((fst ((extractImport (i)))))) + (".js\')")) }; var emitImports = function (is) { var f = function (x) {  return function (y) {  return ((x + ("; ")) + ((emitImport (y)))) } }; return (((foldLeft (f)) (";")) (is)) }; var toJs = function (progAst) { var isOp = function (c) {  return (((((((((c == ("+")) || ((c == ("*")))) || ((c == ("==")))) || ((c == ("||")))) || ((c == ("&&")))) || ((c == ("-")))) || ((c == ("/")))) || ((c == (">")))) || ((c == ("<")))) }; var pair = (extractProg (progAst)); var imports = (fst (pair)); var exprjs = (((((((cataExp ((snd (pair)))) (function (x) {  return (show (x)) })) (function (s) {  return s })) (function (s) {  return function (e) {  return ((((("function (" + (s)) + (") { ")) + (function() { if ((((startsWith ("if")) (e)) || (((startsWith ("var")) (e))))) { return "" } else { return " return " } }())) + (e)) + (" }")) } })) (function (e1) {  return function (e2) {  return function() { if ((isOp (e1))) { return ((e2 + (" ")) + (e1)) } else { return (((("(" + (e1)) + (" (")) + (e2)) + ("))")) } }() } })) (function (s) {  return function (e1) {  return function (e2) {  return (((("var " + (s)) + (" = ")) + (function() { if (((startsWith ("var")) (e1))) { return (("function () { " + (e1)) + (" }();")) } else { return e1 } }())) + (function() { if ((e2 == ("\"()\""))) { return "" } else { return (function() { if ((((startsWith ("if")) (e2)) || (((startsWith ("var")) (e2))))) { return "; " } else { return "; return " } }() + (e2)) } }())) } } })) (function (p) {  return function (e1) {  return function (e2) {  return (((((("function() { if (" + (p)) + (") { ")) + (function() { if ((((startsWith ("if")) (e1)) || (((startsWith ("var")) (e1))))) { return e1 } else { return ("return " + (e1)) } }())) + (" } else { ")) + (function() { if ((((startsWith ("if")) (e2)) || (((startsWith ("var")) (e2))))) { return e2 } else { return ("return " + (e2)) } }())) + (" } }()")) } } })); return (((((emitImports (imports)) + ("; ")) + (exprjs)) + ("; ")) + ((emitExports ((snd (pair)))))) }; exports.cataExp = cataExp; exports.pretty = pretty; exports.emitExports = emitExports; exports.emitFuncImport = emitFuncImport; exports.emitImport = emitImport; exports.emitImports = emitImports; exports.toJs = toJs; 