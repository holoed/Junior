let compose = \f -> \g -> \x -> f (g x) in

let foldLeft = \f -> \v -> \xs ->
  if (isEmpty xs) then v
  else foldLeft f (f v (head xs)) (tail xs) in

let id = \x -> x in

let foldRight = \f -> \v -> \xs ->
  foldLeft (\g -> \b -> \x -> g (f b x)) id xs v in

let append = \xs -> \ys ->
  if (isEmpty xs) then ys
  else (cons (head xs) (append (tail xs) ys)) in

let concat = \xss ->
  if (isEmpty xss) then nil
  else append (head xss) (concat (tail xss)) in

let range = \startIndex -> \endIndex ->
    let range2 = \acc -> \endIndex ->
      if (startIndex > endIndex) then acc
      else range2 (cons endIndex acc) (endIndex - 1) in
    range2 nil endIndex in

let fmap = \f -> \xs ->
  foldRight (\x -> \acc -> cons (f x) acc) nil xs in

let flatMap = \f -> compose concat (fmap f) in

let isDigit = \ch -> (ch == "0") || (ch == "1") ||
                     (ch == "2") || (ch == "3") ||
                     (ch == "4") || (ch == "5") ||
                     (ch == "6") || (ch == "7") ||
                     (ch == "8") || (ch == "9") in

let bind = \m -> \f -> \cs ->
  let xs = m cs in
  if (isEmpty xs) then empty
  else let n = head xs in f (fst n) (snd n) in

let unit = \x -> \cs -> (cons (mkTuple2 x cs) empty) in

let fail = \cs -> empty in

let item = \cs ->
  if (isEmpty cs) then empty
  else let ch = (head cs) in (cons (mkTuple2 ch (tail cs)) empty) in

let sep = \p -> \q -> bind p (\x ->
                      bind q (\y ->
                      unit (mkTuple2 x y))) in

let sat = \p -> bind item (\ch -> if (p ch) then unit ch else fail) in

let chr = \x -> sat (\ch -> ch == x) in

let choice = \p -> \q -> \cs ->
  let xs = p cs in
  if (isEmpty xs) then q cs
  else xs in

let many = \p -> choice (bind p (\x ->
                         bind (many p) (\xs ->
                         unit (cons x xs)))) (unit empty) in

let digit = sat isDigit in

let lower = sat isLower in

let upper = sat isUpper in

let letter = choice lower upper in

let alphanum = choice letter digit in

let word = many letter in

let fac = \n -> foldRight (\x -> \y -> x * y) 1 (range 1 n) in

let xs = concat (append (cons (cons (fac 5) nil) nil) (cons (cons (fac 6) nil) nil)) in

"Hello World"
