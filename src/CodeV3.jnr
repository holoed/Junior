let compose = \f -> \g -> \x -> f (g x) in

let foldLeft = \f -> \v -> \xs ->
  if (isEmpty xs) then v
  else foldLeft f (f v (head xs)) (tail xs) in

let id = \x -> x in

let foldRight = \f -> \v -> \xs ->
  foldLeft (\g -> \b -> \x -> g (f b x)) id xs v in

let append = \xs -> \ys ->
  if (isEmpty xs) then ys
  else (cons (head xs) (append (tail xs) ys)) in

let concat = \xss ->
  if (isEmpty xss) then nil
  else append (head xss) (concat (tail xss)) in

let range = \startIndex -> \endIndex ->
    let range2 = \acc -> \endIndex ->
      if (startIndex > endIndex) then acc
      else range2 (cons endIndex acc) (endIndex - 1) in
    range2 nil endIndex in

let fmap = \f -> \xs ->
  foldRight (\x -> \acc -> cons (f x) acc) nil xs in

let flatMap = \f -> compose concat (fmap f) in

let isDigit = \ch -> (ch == "0") || (ch == "1") ||
                     (ch == "2") || (ch == "3") ||
                     (ch == "4") || (ch == "5") ||
                     (ch == "6") || (ch == "7") ||
                     (ch == "8") || (ch == "9") in

let bind = \m -> \f -> \cs ->
  let xs = m cs in
  if (isEmpty xs) then empty
  else let n = head xs in f (fst n) (snd n) in

let unit = \x -> \cs -> (cons (mkTuple2 x cs) empty) in

let fail = \cs -> empty in

let item = \cs ->
  if (isEmpty cs) then empty
  else let ch = (head cs) in (cons (mkTuple2 ch (tail cs)) empty) in

let sep = \p -> \q -> bind p (\x ->
                      bind q (\y ->
                      unit (mkTuple2 x y))) in

let sat = \p -> bind item (\ch -> if (p ch) then unit ch else fail) in

let chr = \x -> sat (\ch -> ch == x) in

let choice = \p -> \q -> \cs ->
  let xs = p cs in
  if (isEmpty xs) then q cs
  else xs in

let many = \p -> choice (bind p (\x ->
                         bind (many p) (\xs ->
                         unit (cons x xs)))) (unit empty) in

let digit = sat isDigit in

let lower = sat isLower in

let upper = sat isUpper in

let letter = choice lower upper in

let alphanum = choice letter digit in

let word = many letter in

let space = bind (sat isSpace)(\x -> unit "") in

let spaces = bind (many space)(\x -> unit "") in

let str = \txt ->
  let xs = stringToCharList txt in
  let str2 = \xs ->
   if (isEmpty xs) then unit empty
   else let x = head xs in
        let xs2 = tail xs in
        bind (chr x) (\a ->
        bind (str2 xs2) (\b ->
        unit (cons x xs2))) in
  bind (str2 xs) (\ys -> unit (charListToString ys)) in

let junk = bind (many space) (\a -> unit "") in

let token = \p -> bind p (\x ->
                  bind junk (\a ->
                  unit x)) in

let parse = \p -> bind junk (\a -> p) in

let symbol = \txt -> token (str txt) in

let ident = bind lower (\x ->
            bind (many alphanum) (\xs ->
            unit (charListToString (cons x xs)))) in

let many1 = \p -> bind p (\x ->
                  bind (many p) (\xs ->
                  unit (cons x xs))) in

let nat = bind (many1 digit) (\xs -> unit (stringToInt (charListToString xs))) in

let integer =
  let op = choice (bind (chr "-")(\x -> unit neg)) (unit (\x -> x)) in
  bind op (\f ->
  bind nat (\n ->
  unit (f n))) in

let makeFloat = \m -> \n ->
  if (m > 0) then m + (n * (1 / (size n)))
             else m - (n * (1 / (size n))) in

let float =
  bind integer (\m ->
  bind (symbol ".")(\x ->
  bind nat (\n ->
  unit (makeFloat m n)))) in

let identifier = \ks ->
  bind (token ident)(\x -> if (notElem x ks) then (unit x) else fail) in

let variable = identifier (cons "let" (cons "in" (cons "if" (cons "then" (cons "else" empty))))) in

let vaR = bind variable (\s -> unit (evar s)) in

let noneOf = \cs -> sat (\c -> notElem c cs) in

let escapedQuotes = bind (chr "\\")(\x ->
                    bind (chr "\"")(\y ->
                    unit "\"")) in

let escapedBackslash = bind (chr "\\")(\x ->
                       bind (chr "\\")(\y ->
                       unit "\\")) in

let escaped = choice escapedQuotes escapedBackslash in

let chars = choice escaped (noneOf (stringToCharList "\\\"")) in

let quotedString = bind (chr "\"")(\x ->
                   bind (many chars)(\xs ->
                   bind (chr "\"")(\z ->
                   unit (charListToString xs)))) in

let lit =  choice (bind (token integer) (\n -> unit (elit n)))
                  (bind (token quotedString) (\s -> unit (elitS s))) in

let chainl1 = \p -> \op ->
  let rest = \x -> choice (bind op (\f ->
                           bind p  (\y ->
                           rest (f x y)))) (unit x) in
  bind p rest in

let chainr1 = \p -> \op ->
  let rest = \x -> choice (bind op (\f ->
                           bind (chainr1 p op) (\y ->
                           unit (f x y)))) (unit x) in
  bind p rest in

let infixOp = \s -> \x -> \y -> eapp (eapp (evar s) x) y in

let addOp = choice (bind (symbol "+")(\x -> unit (infixOp "+")))
                   (bind (symbol "-")(\x -> unit (infixOp "-"))) in

let mulOp = choice (bind (symbol "*")(\x -> unit (infixOp "*")))
                   (bind (symbol "/")(\x -> unit (infixOp "/"))) in

let cmpOp = choice (choice (choice (bind (symbol ">")(\x -> unit (infixOp ">")))
                                   (bind (symbol "<")(\x -> unit (infixOp "<"))))
                                   (bind (symbol "==")(\x -> unit (infixOp "=="))))
                                   (bind (symbol "||")(\x -> unit (infixOp "||"))) in

let expr =
   let parens = bind (symbol "(")(\i1 ->
                bind expr (\e ->
                bind (symbol ")")(\i2 ->
                unit e))) in

   let lam   = bind (symbol "\\")(\i1 ->
               bind variable (\s ->
               bind (symbol "->")(\i2 ->
               bind expr (\e ->
               unit (elam s e))))) in

   let local = bind (symbol "let")(\i1 ->
               bind variable (\v ->
               bind (symbol "=")(\i2 ->
               bind expr (\e1 ->
               bind (symbol "in")(\i3 ->
               bind expr (\e2 ->
               unit (elet v e1 e2))))))) in

   let ifThenElse = bind (symbol "if")(\i1 ->
                    bind expr (\p ->
                    bind (symbol "then")(\i2 ->
                    bind expr (\e1 ->
                    bind (symbol "else")(\i3 ->
                    bind expr (\e2 ->
                    unit (eIfThenElse p e1 e2))))))) in

   let atom = choice (choice (choice (choice (choice ifThenElse lam) local) vaR) lit) parens in

   foldLeft chainl1 atom (cons mulOp (cons addOp (cons cmpOp (cons (unit eapp) empty)))) in

let cataExp = \e -> \litF -> \varF -> \lamF -> \appF -> \letF -> \ifThenElseF ->
  let cata = \e ->
    if (isLit e) then litF (extractLit e)
    else if (isVar e) then varF (extractVar e)
    else if (isLam e) then
      let pair = extractLam e in
      let n = fst pair in
      let b = snd pair in
      lamF n (cata b)
    else if (isApp e) then
      let pair = extractApp e in
      let e1 = fst pair in
      let e2 = snd pair in
      appF (cata e1) (cata e2)
    else if (isLet e) then
      let args = extractLet e in
      let n = fst (fst args) in
      let v = snd (fst args) in
      let b = snd args in
      letF n (cata v) (cata b)
    else if (isIfThenElse e) then
      let args = extractIfThenElse e in
      let p = fst args in
      let t = fst (snd args) in
      let h = snd (snd args) in
      ifThenElseF (cata p) (cata t) (cata h)
    else (error "This should not happen") in
  cata e in

let pretty = \e ->
  let isOp = \c -> (c == "-") || (c == "==") || (c == "*") in
  cataExp e
    (\x -> show x)
    (\s -> s)
    (\s -> \e -> "\\" + s + " -> " + e)
    (\e1 -> \e2 -> if (isOp e1) then (e2 + " " + e1) else ("(" + e1 + " " + e2 + ")"))
    (\s -> \e1 -> \e2 -> "let " + s + " = " + e1 + " in " + e2)
    (\p -> \e1 -> \e2 -> "if " + p + " then " + e1 + " else " + e2) in

let toJs = \e ->
  let isOp = \c -> (c == "+") || (c == "*") || (c == "==") || (c == "||") || (c == "&&") ||
                   (c == "-") || (c == "/") || (c == ">") || (c == "<") in
  cataExp e
    (\x -> show x)
    (\s -> s)
    (\s -> \e -> "function (" + s + ") { " + (if ((startsWith "if" e) || (startsWith "var" e)) then "" else " return ") + e + " }")
    (\e1 -> \e2 -> if (isOp e1) then (e2 + " " + e1) else ("(" + e1 + " (" + e2 + "))"))
    (\s -> \e1 -> \e2 -> "var " + s + " = "
       + (if (startsWith "var" e1) then "function () { " + e1 + " }();" else e1)
       + (if ((startsWith "if" e2) || (startsWith "var" e2)) then "; " else "; return ") + e2)
    (\p -> \e1 -> \e2 -> "function() { if (" + p + ") { " + (if ((startsWith "if" e1) || (startsWith "var" e1)) then e1 else ("return " + e1))  + " } else { " + (if ((startsWith "if" e2) || (startsWith "var" e2)) then e2 else ("return " + e2)) + " } }()") in

let txt = readFile inputFilePath in

let sample = fst (head (parse expr (stringToCharList txt))) in

let externals = readFile "Externals.js" in

writeFile (replaceExtensionToJs inputFilePath) (externals + "; exports.main = function(inputFilePath){ " + (toJs sample) + "}")
