import Base (foldLeft, fmap)
import Externals (mkTuple2, fst, snd, empty, containsKey, findValue, error, singletonSet, union, emptySet, not, setContains, emptyDict, addEntry, isEmpty, elit, evar, elam, eapp, elet)
import TypesExternals (mkTyCon, mkTyVar, mkTyLam, TyVar, TyLam, isInt, isFloat, isString, isChar, isTyCon, isTyLam, isTyVar, extractTyLam, extractTyVar, extractTyCon, mkForAll, extractForAll)
import CodeGenerator (cataExp)

let bind = \m -> \f -> \r -> \s ->
 let p = ((m r) s) in
 let s2 = (fst p) in
 let x = (snd p) in
 ((f x) r) s2 in

let unit = \x -> \r -> \s -> mkTuple2 s x in

let ask = \r -> \s -> mkTuple2 s r in

let local = \f -> \m -> \r -> \s -> m (f r) s in

let put = \s2 -> \r -> \s -> mkTuple2 s2 () in

let get = \r -> \s -> mkTuple2 s s in

let runReaderState = \m -> \r -> \s -> (m r) s in

let freshName = bind get (\state ->
                let index = snd state in
                bind (put (mkTuple2 (fst state) (index + 1)))(\i2 ->
                unit (mkTyVar ("T" + index)))) in

let prettyType = \t ->
  if (isTyCon t) then
    let p = extractTyCon t in
    (fst p) + (foldLeft (\acc -> \x -> acc + " " + (prettyType x)) "" (snd p))
  else if (isTyVar t) then
    extractTyVar t
  else if (isTyLam t) then
    let p = extractTyLam t in
    "(" + (prettyType (fst p)) + " -> " + (prettyType (snd p)) + ")"
  else error "This should not happen" in

let integerCon = mkTyCon "Int" empty in
let floatCon = mkTyCon "Float" empty in
let charCon = mkTyCon "Char" empty in
let stringCon = mkTyCon "String"  empty in

let literalToType = \lit ->
    if (isInt lit) then integerCon
    else if (isFloat lit) then floatCon
    else if (isChar lit) then charCon
    else if (isString lit) then stringCon
    else error "This should not happen" in

let lookup = \k -> \dict ->
    if (containsKey k dict) then
        (findValue k dict)
    else
        (mkTyVar k) in

let equalType = \t1 -> \t2 ->
  ((isTyVar t1) && (isTyVar t2)) && ((extractTyVar t1) == (extractTyVar t2)) in

let subst = \t -> \s ->
    if (isTyVar t) then
      let n = (extractTyVar t) in
      let t2 = (lookup n s) in
      if (equalType t t2) then t2
      else (subst t2 s)
    else if (isTyLam t) then
      let p = extractTyLam t in
      mkTyLam (subst (fst p) s) (subst (snd p) s)
    else if (isTyCon t) then
      let p = extractTyCon t in
      mkTyCon (fst p) (fmap (\x -> subst x s) (snd p))
    else (error "This should not happen") in

let getTVarsOfType = \t ->
  if (isTyVar t) then singletonSet (extractTyVar t)
  else if (isTyLam t) then
    let p = extractTyLam t in
    union (getTVarsOfType (fst p)) (getTVarsOfType (snd p))
  else if (isTyCon t) then
    let p = extractTyCon t in
    foldLeft (\acc -> \x -> union acc (getTVarsOfType x)) emptySet (snd p)
  else error "This should not happen" in

let fold2 = \f -> \acc -> \xs -> \ys ->
  if ((isEmpty xs) && (isEmpty ys)) then acc
  else fold2 f (f acc (head xs) (head ys)) (tail xs) (tail ys) in

let mgu = \a -> \b -> \s ->
  let p = mkTuple2 (subst a s) (subst b s) in
  if (((isTyVar (fst p)) && (isTyVar (snd p))) &&
      ((extractTyVar (fst p)) == (extractTyVar (snd p)))) then s
  else if ((isTyVar (fst p)) &&
           (not (setContains (extractTyVar (fst p)) (getTVarsOfType (snd p))))) then
              addEntry (extractTyVar (fst p)) b s
  else if (isTyVar (snd p)) then mgu b a s
  else if ((isTyLam (fst p)) && (isTyLam (snd p))) then
    let p1 = extractTyLam (fst p) in
    let p2 = extractTyLam (snd p) in
    mgu (fst p1) (fst p2) (mgu (snd p1) (snd p2) s)
  else if (((isTyCon (fst p)) && (isTyCon (snd p))) &&
           ((fst (extractTyCon (fst p))) == (fst (extractTyCon (snd p))))) then
           fold2 (\subst -> \t1 -> \t2 -> mgu t1 t2 subst) s (snd (extractTyCon (fst p))) (snd (extractTyCon (snd p)))
  else error "This should not happen" in

let findScheme = \name -> \env ->
  findValue name env in

let addScheme = \name -> \ty -> \env ->
  addEntry name (mkForAll ty empty) env in

let getTypeForName = \name -> \env ->
  let p = extractForAll (findScheme name env) in
  fst p in

let tp = \e ->
  cataExp e
    (\x -> bind ask (\env ->
           bind get (\state ->
           let baseType = snd env in
           let subs = fst state in
           let index = snd state in
           let newSubs = mgu (literalToType x) baseType subs in
           bind (put (mkTuple2 newSubs index)) (\ig ->
           unit (elit x)))))
    (\s -> bind ask (\env ->
           let ty = getTypeForName s (fst env) in
           bind get (\state ->
           let baseType = snd env in
           let subs = fst state in
           let index = snd state in
           let newSubs = mgu ty baseType subs in
           bind (put (mkTuple2 newSubs index)) (\ig ->
           unit (evar s)))))
    (\s -> \e -> bind ask (\env ->
                 bind (freshName)(\t1 ->
                 bind (freshName)(\t2 ->
                 bind get (\state ->
                 let baseType = snd env in
                 let subs = fst state in
                 let index = snd state in
                 let newSubs = mgu baseType (mkTyLam t1 t2) subs in
                 bind (put (mkTuple2 newSubs index)) (\ig ->
                 bind (local (\pair -> mkTuple2 (addScheme s t1 (fst pair)) t2) e)(\e2 ->
                 unit (elam s e2))))))))
    (\e1 -> \e2 -> bind ask (\env ->
                   bind (freshName)(\t1 ->
                   bind (local (\pair -> mkTuple2 (fst pair) (mkTyLam t1 (snd pair))) e1)(\e1p ->
                   bind (local (\pair -> mkTuple2 (fst pair) t1) e2)(\e2p ->
                   unit (eapp e1p e2p))))))
    (\s -> \e1 -> \e2 -> bind ask (\env ->
                         bind (freshName) (\t1 ->
                         bind (local (\pair -> mkTuple2 (addScheme s t1 (fst pair)) t1) e1)(\e1p ->
                         bind get (\state ->
                         let t1p = subst t1 (fst state) in
                         bind (local (\pair -> mkTuple2 (addScheme s t1 (fst pair)) (snd env)) e2)(\e2p ->
                         unit (elet s e1p e2p)))))))
    (\p -> \e1 -> \e2 -> error "") in

let predefTypeEnv =
   addEntry "+" (mkForAll (mkTyLam integerCon (mkTyLam integerCon integerCon)) empty)
  (addEntry "-" (mkForAll (mkTyLam integerCon (mkTyLam integerCon integerCon)) empty)
   emptyDict) in

let typeOf = \e ->
  let baseType = mkTyVar "TBase" in
  let ret = runReaderState (tp e) (mkTuple2 predefTypeEnv baseType) (mkTuple2 emptyDict 0) in
  subst baseType (fst (fst ret)) in

()
