import Base (foldLeft)
import Externals (mkTuple2, fst, snd, empty, containsKey, findValue, error)
import TypesExternals (mkTyCon, mkTyVar, isTyVar, TyVar, TyLam, isInt, isFloat, isString, isChar)

let bind = \m -> \f -> \r -> \s ->
 let p = ((m r) s) in
 let s2 = (fst p) in
 let x = (snd p) in
 ((f x) r) s2 in

let unit = \x -> \r -> \s -> mkTuple2 s x in

let ask = \r -> \s -> mkTuple2 s r in

let local = \f -> \m -> \r -> \s -> m (f r) s in

let put = \s2 -> \r -> \s -> mkTuple2 s2 () in

let get = \r -> \s -> mkTuple2 s s in

let runReaderState = \m -> \r -> \s -> (m r) s in

let freshName = bind get (\x ->
                bind (put (x + 1))(\i2 ->
                unit ("T" + x))) in

let prettyType = \t ->
  if (isTyCon t) then
    let p = extractTyCon t in
    (fst p) + " " + (foldLeft (\acc -> \x -> acc + (prettyType x)) "" (snd p))
  else if (isTyVar t) then
    extractTyVar t
  else if (isTyLam t) then
    let p = extractTyLam t in
    "(" + (prettyType (fst p)) + " -> " + (prettyType (snd p)) + ")"
  else error "This should not happen" in

let integerCon = mkTyCon "Int" empty in
let floatCon = mkTyCon "Float" empty in
let charCon = mkTyCon "Char" empty in
let stringCon = mkTyCon "String"  empty in

let literalToType = \lit ->
    if (isInt lit) then integerCon
    else if (isFloat lit) then floatCon
    else if (isChar lit) then charCon
    else if (isString lit) then stringCon
    else error "This should not happen" in

let lookup = \k -> \dict ->
    if (containsKey k dict) then
        (findValue k dict)
    else
        (mkTyVar k) in

let equalType = \t1 -> \t2 ->
  ((isTyVar t1) && (isTyVar t2)) && ((extractTyVar t1) == (extractTyVar t2)) in

let subs = \t -> \s ->
    if (isTyVar t) then
      let n = (extractTyVar t) in
      let t2 = (lookup n s) in
      if (equalType t t2) then t2
      else (subs t2 s)
    else (error "This should not happen") in

()
